from enums import *
import random


class DungeonSimulator:
    def __init__(self, length=6, slip=0, small=5/1000, large=1):
        self.length = length  # Length of the dungeon
        self.slip = slip  # probability of 'slipping' an action
        self.small = small  # payout for BACKWARD action
        self.large = large  # payout at end of chain for FORWARD action
        self.state = 0  # Start at beginning of the dungeon

        # for UCBVI implementation:
        self.states = {}
        for s in range(self.length + 1):
            self.states[s] = []
        self.nAction = 2

    def take_action(self, action):
        # if random.random() < self.slip:
        #     action = not action  # agent slipped, reverse action taken
        # if action == BACKWARD:  # BACKWARD: go back to the beginning, get small reward
        #     reward = self.small
        #     self.state = 0
        # elif action == FORWARD:  # FORWARD: go up along the dungeon
        #     if self.state < self.length - 1:
        #         self.state += 1
        #         reward = 0
        #     else:
        #         reward = self.large
        # return self.state, reward

        if action == BACKWARD:
            if self.state > 0:
                self.state -= 1
                reward = 0
            else:
                reward = self.small
        elif action == FORWARD:
            rand = random.random()
            if self.state == 0:
                if rand < 0.4:  # stay in place
                    reward = self.small
                else:
                    self.state += 1
                    reward = 0
            elif self.state == self.length - 1:
                if rand < 0.4:  # move backward
                    self.state -= 1
                    reward = 0
                else:
                    reward = self.large
            else:
                if rand < 0.05:  # move backward
                    self.state -= 1
                    reward = 0
                elif rand < 0.4:  # move forward
                    self.state += 1
                    reward = 0
                else:  # stay in place
                    reward = 0
        return self.state, reward

    def reset(self):
        self.state = 0  # Reset state to zero, the beginning of dungeon
        return self.state
